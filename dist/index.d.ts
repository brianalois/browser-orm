export declare class Model {
    static model_name: string;
    static _instances: Array<Model>;
    static all_data: Array<object>;
    constructor(obj_data: any);
    getModelName(): any;
    toObject(): any;
    uniqueQueryIdentifier(): any;
    uniqueIdName(): any;
    uniqueId(): any;
    save(): void;
    remove(): void;
    reload(): void;
    getStorageValues(): any;
    getInstanceValues(): any;
    getPropertyDifferences(): any;
    readonly static: any;
    storageDifference(): any;
    instanceDifference(): any;
    belongsTo(model: any, foreign_key: any, reference_key: any): any;
    hasOne(model: any, foreign_key: any, reference_key: any): any;
    hasMany(model: any, foreign_key: any, reference_key: any): any;
    belongsToMany(model: any, foreign_key: any, reference_key: any, contains?: boolean): any;
    static describe(): Array<string>;
    static setlocalStorage(name: string, data: Object): void;
    static getlocalStorage(name: string): Object;
    static removeLocalStorage(name: string): void;
    static getModelName(): string;
    static removeAllData(): void;
    static setAllData(data: Array<Object>): void;
    static getAllData(): any;
    static getPrimaryKey(): string;
    static schemaValidate(data: any): any;
    static instantiateObject(obj_data: any, single?: boolean): any;
    static create(data: any, single?: boolean): any;
    static removeInstance(search: object): void;
    static removeStorage(search: object): void;
    static remove(search: object): void;
    static update(search: object, new_data: any, single?: boolean): any[] | null;
    static updateOne(search: object, new_data: any, single?: boolean): any;
    static search(search: any): any;
    static find(search: object, single?: boolean): any[];
    static findOne(search?: object, single?: boolean): any;
    static findArray(search: any, single?: boolean): any[];
    static findOneArray(search?: any, single?: boolean): any;
    static findOneAndUpdate(search: object, data?: any, options?: any): any;
    static createOrUpdate(search: object): any;
    static findById(id: string, single?: boolean): any;
    static difference(a: any, b: any): any;
    static newGet(obj: object, str: string): any[];
    static _events: any;
    static on(events: any, listener?: Function): () => void;
    static emit(events: any, data?: any): void;
    _events: any;
    on(events: any, listener?: Function): () => void;
    emit(events: any, data?: any, toStatic?: boolean): void;
    static SCHEMA: Object;
    static getSchema(): any;
    static _cols: any;
    static getCols(): any;
}
export declare let Col: (options?: any) => any;
